
<Video
        style={styles.playerView}
        source={{ uri: inputUrl}}
        muted={!audioStatus}
        resizeMode="cover"
        ref={(ref) => {
          this.player = ref
        }}                                      // Store reference
        hls={true}
        paused = {false}
        repeat={true}                           
        playInBackground={false}                
        playWhenInactive={false}             
        bufferConfig={{
          minBufferMs: 15000,
          maxBufferMs: 50000,
          bufferForPlaybackMs: 2500,
          bufferForPlaybackAfterRebufferMs: 5000
        }}
        disableFocus={true} // disables audio focus and wake lock (default false)
      />

<Video
        style={styles.playerView}
        source={{ uri: inputUrl}}
        muted={!audioStatus}
        resizeMode="cover"
        ref={(ref) => {
          this.player = ref
        }}                                      // Store reference
        hls={true}
        paused = {false}
        bufferConfig={{
          minBufferMs: 15000,
          maxBufferMs: 50000,
          bufferForPlaybackMs: 2500,
          bufferForPlaybackAfterRebufferMs: 5000
        }}
        disableFocus={true} // disables audio focus and wake lock (default false)
      />


<Animated.View
              style={[
                {
                  width,
                  height: videoHeight,
                  opacity: opacityLoad,
                  backGroundColor: 'black',
                },
                videoStyles,
              ]}
              {...this._panResponder.panHandlers}
            >

                   </Animated.View>


                     <Draggable x= {250} y={550} renderSize={150} renderColor="green"></Draggable>


<View>
      <Video
        style={styles.previewimage}
        source={{ uri: inputUrl}}
        muted={true}
        resizeMode="cover"
        ref={(ref) => {
          this.player = ref
        }}                                      // Store reference
       />
    </View>

const NodePlayerViewWrapper = React.forwardRef((props, ref) => {
  const onBackground = () => {
    ref.current.stop();
  };

  const onForeground = () => {
    ref.current.start();
  };

  return <NodePlayerView ref={ref} {...props} />;
});